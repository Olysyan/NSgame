'''стратегия 1 игрока, ориентируется на закрепленные точки
 и выводит массив с новой точкой, для получения большего кол-ва пикселей 
 при шаге игры жизнь.
суть работы функции схожа с функцией шага игры, но применяется и реализовыввается
абсолютно иным образом:
такие же данные имеем на вход и так же проходим по эелемнтам подмассивов,
но проверяем благоприятные и нежелательные исходы для выгодной стратегии.
для благоприятного исхода ориентируемся на фигуру образованную четырьмя 
пикселями как на этом рисунке
010
111
где недостает одной единицы, смотрим на неблагоприятные исходы - исход этой
фигуры после шага игры жизнь если пиксели накладываются, то данная фигура 
считается неправильной и алгоритм ее пропускает, если условия соблюдаются
и на местах неблагоприятных исходов стоят нули, то алгоритм добавляет 
недостающий пиксель фигуре. все это записывается в массив и используется в игре.
'''
def player_1_strategy(new_matrix_p1):
    input_counter = 1
    m_dublikate = new_matrix_p1
    i = -1
    m_w = 150
    m_h = 150
    point_score = 0
    if input_counter == 1:
        for j in m_dublikate:
            i += 1
            a = -1
            for elements in j:
                a += 1
			
                if  input_counter == 1:
				
                    if m_dublikate[a%m_w][i%m_h] == 1:
                        point_score += 1
                    if m_dublikate[(a+1) % m_w][(i) % m_h] == 1:
                        point_score += 1
                    if m_dublikate[(a+2)%m_w][i%m_h] == 1:
                        point_score += 1
                    if m_dublikate[(a+1)%m_w][(i+1)%m_h] == 1:
                        point_score += 1		
                    if (m_dublikate[(a)%m_w][(i+1)%m_h] == 0) and (m_dublikate[(a+2)%m_w][(i+1)%m_h] == 0) and (m_dublikate[(a+1)%m_w][(i-1)%m_h] == 0) and (m_dublikate[(a+1)%m_w][(i+2)%m_h] == 0) and (m_dublikate[(a)%m_w][(i-1)%m_h] == 0) and (m_dublikate[(a+2)%m_w][(i-1)%m_h] == 0) and input_counter == 1:
                        point_score += 2
                        if point_score == 5:
                            if generation_counter1 > generation1:
                                if m_dublikate[a%m_w][i%m_h] == 0:
                                    m_dublikate[a%m_w][i%m_h] = 1
								    
					
						
							
                                if m_dublikate[(a+1) % m_w][(i) % m_h] == 0:
								
                                    m_dublikate[(a+1) % m_w][(i) % m_h] =1
								
					
							
                                if m_dublikate[(a+2)%m_w][i%m_h] == 0:
							
                                    m_dublikate[(a+2)%m_w][i%m_h] = 1
								
							
						
                                if m_dublikate[(a+1)%m_w][(i+1)%m_h] == 0:
							
								
                                    m_dublikate[(a+1)%m_w][(i+1)%m_h]=1
						
							
                                input_counter -= 1
    return m_dublikate
